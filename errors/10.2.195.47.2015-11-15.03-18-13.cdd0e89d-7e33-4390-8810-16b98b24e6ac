(dp1
S'output'
p2
S'<type \'exceptions.ValueError\'> invalid literal for long() with base 10: "<Row {\'tag\': 2L}>"'
p3
sS'layer'
p4
S'C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\applications\\CalenZone\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n@auth.requires_login()\ndef profile():\n    form = SQLFORM(db.userTag)\n    #dn=db(db.auth_user.id==request.args[0]).select()\n    tags = db(db.auth_user.id==db.userTag.auth_user and db.tag.id==db.userTag.tag).select(db.auth_user.email, db.tag.tagName)\n    form.vars.auth_user = session.auth.user.id\n    if form.process().accepted:\n        response.flash = T("Tag Added!")\n    return dict(form=form, tags=tags)\n\n@auth.requires_login()\ndef createEvent():\n    form = SQLFORM(db.events)\n    form.vars.ownerOfEvent = session.auth.user.id\n    if form.process().accepted:\n        response.flash = T("Event Created!")\n        redirect(URL(\'showEvent\', args=[4]))\n    return dict(form=form)\n\n@auth.requires_login()\ndef setEventTags():\n    form = SQLFORM(db.eventTag)\n    if form.process().accepted:\n        response.flash = T("Tag added!")\n    return dict(form=form)\n\ndef showEvent():\n    event = db(db.events.auth_user == request.args[0]).select()\n    return locals();\n\n@auth.requires_login()\ndef eventView():\n    ##db(db.userTag.auth_user==session.auth.user.id).select()\n    tags=db(db.userTag.auth_user==session.auth.user.id).select(db.userTag.tag)\n    events = []\n    blah = tags[0]\n    for taga in tags:\n        events = db(db.eventTag.tag == str(taga)).select(db.events.eventName)\n    return locals()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(eventView)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\applications\\CalenZone\\controllers/default.py", line 100, in <module>\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\tools.py", line 3774, in f\n    return action(*a, **b)\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\applications\\CalenZone\\controllers/default.py", line 59, in eventView\n    events = db(db.eventTag.tag == str(taga)).select(db.events.eventName)\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2002, in select\n    return adapter.select(self.query,fields,attributes)\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\sqlite.py", line 122, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1273, in select\n    sql = self._select(query, fields, attributes)\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1160, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 945, in expand\n    rv = op(first, second, **optional_args)\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 839, in EQ\n    self.expand(second, first.type))\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 955, in expand\n    rv = self.represent(expression, field_type)\n  File "C:\\Users\\Mukul Hase\\Documents\\Codes\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1432, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: "<Row {\'tag\': 2L}>"\n'
p11
s.